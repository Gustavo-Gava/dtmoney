{"version":3,"sources":["services/api.ts","TransactionsContext.tsx","hooks/useTransactions.ts","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","assets/close.svg","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","transactionId","delete","map","title","category","DateTimeFormat","Date","createdAt","onClick","handleDeleteTransaction","id","closeImg","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","form","TransactionTypeContainer","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setType","setTitle","setCategory","setAmount","event","preventDefault","trim","alert","overlayClassName","onSubmit","placeholder","onChange","e","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce343abf.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const api = axios.create({\r\n  baseURL: 'http://localhost:3000/api'\r\n})","import {\r\n  createContext,\r\n  useEffect,\r\n  useState,\r\n  ReactNode,\r\n  Dispatch,\r\n  SetStateAction,\r\n} from \"react\"\r\nimport { api } from \"./services/api\"\r\n\r\ntype Transaction = {\r\n  id: number\r\n  title: string\r\n  type: string\r\n  category: string\r\n  amount: number\r\n  createdAt: string\r\n}\r\n\r\ntype TransactionInput = Omit<Transaction, \"id\" | \"createdAt\">\r\n\r\ntype TransactionsProviderProps = {\r\n  children: ReactNode\r\n}\r\n\r\ntype TransactionsContextData = {\r\n  transactions: Transaction[]\r\n  createTransaction: (transaction: TransactionInput) => Promise<void>\r\n  setTransactions: Dispatch<SetStateAction<Transaction[]>>\r\n}\r\n\r\nexport const TransactionsContext = createContext<TransactionsContextData>(\r\n  {} as TransactionsContextData\r\n)\r\n\r\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([])\r\n\r\n  useEffect(() => {\r\n    api\r\n      .get(\"transactions\")\r\n      .then((response) => setTransactions(response.data.transactions))\r\n  }, [])\r\n\r\n  async function createTransaction(transactionInput: TransactionInput) {\r\n    const response = await api.post(\"/transactions\", transactionInput)\r\n    const { transaction } = response.data\r\n\r\n    setTransactions([...transactions, transaction])\r\n  }\r\n\r\n  return (\r\n    <TransactionsContext.Provider\r\n      value={{ transactions, setTransactions, createTransaction }}\r\n    >\r\n      {children}\r\n    </TransactionsContext.Provider>\r\n  )\r\n}\r\n","import {useContext} from 'react';\r\nimport {TransactionsContext} from '../TransactionsContext'\r\n\r\nexport function useTransactions() {\r\n  const value = useContext(TransactionsContext)\r\n\r\n  return value\r\n}\r\n","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-top: -8rem;\r\n\r\n  div{ \r\n    background: var(--shape);\r\n    padding: 1.5rem 2rem;\r\n    border-radius: 0.25rem;\r\n    color: var(--text-title);\r\n\r\n    header{\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    strong { \r\n      display: block;\r\n      margin-top: 1rem;\r\n      font-size: 2rem;\r\n      font-size: 500;\r\n    }\r\n\r\n    &.highlight-background {\r\n      background-color: var(--green);\r\n      color: #fff;\r\n    }\r\n  }\r\n`","import { useTransactions } from \"../../hooks/useTransactions\"\r\n\r\nimport incomeImg from \"../../assets/income.svg\"\r\nimport outcomeImg from \"../../assets/outcome.svg\"\r\nimport totalImg from \"../../assets/total.svg\"\r\nimport { Container } from \"./styles\"\r\n\r\nexport function Summary() {\r\n  const { transactions } = useTransactions()\r\n\r\n  const summary = transactions.reduce(\r\n    (acc, transaction) => {\r\n      if (transaction.type === \"deposit\") {\r\n        acc.deposits += transaction.amount\r\n        acc.total += transaction.amount\r\n      } else {\r\n        acc.withdraws -= transaction.amount\r\n        acc.total -= transaction.amount\r\n      }\r\n\r\n      return acc\r\n    },\r\n    {\r\n      deposits: 0,\r\n      withdraws: 0,\r\n      total: 0,\r\n    }\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <header>\r\n          <p>Entradas</p>\r\n          <img src={incomeImg} alt=\"Entradas\" />\r\n        </header>\r\n        <strong>\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.deposits)}\r\n        </strong>\r\n      </div>\r\n\r\n      <div>\r\n        <header>\r\n          <p>Saídas</p>\r\n          <img src={outcomeImg} alt=\"Saídas\" />\r\n        </header>\r\n        <strong>\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.withdraws)}\r\n        </strong>\r\n      </div>\r\n\r\n      <div className=\"highlight-background\">\r\n        <header>\r\n          <p>Total</p>\r\n          <img src={totalImg} alt=\"Entradas\" />\r\n        </header>\r\n        <strong>\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.total)}\r\n        </strong>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  margin-top: 4rem;\r\n\r\n  table {\r\n    width: 100%;\r\n    border-spacing: 0 0.5rem;\r\n\r\n    th { \r\n      color: var(--text-body);\r\n      font-weight: 400;\r\n      padding: 1rem 2rem;\r\n      text-align: left;\r\n      line-height: 1.5rem;\r\n\r\n      &:first-child{\r\n        color: var(--text-title)\r\n      }\r\n    }\r\n\r\n    td{\r\n      padding: 1rem 2rem;\r\n      border: 0;\r\n      background-color: var(--shape);\r\n      color: var(--text-body);\r\n      border-radius: 0.25rem;\r\n\r\n      &:first-child {\r\n        color: var(--text-title);\r\n        font-weight: 600;\r\n      }\r\n\r\n      &.deposit{\r\n        color: var(--green);\r\n      }\r\n\r\n      &.withdraw {\r\n        color: var(--red);\r\n      }\r\n\r\n      img{\r\n        cursor: pointer;\r\n\r\n        transition: filter 0.2s;\r\n        \r\n        &:hover{\r\n          filter: brightness(0.5);\r\n        }\r\n      }\r\n    }\r\n  }\r\n`","export default __webpack_public_path__ + \"static/media/close.c8ac969a.svg\";","import { useTransactions } from \"../../hooks/useTransactions\"\r\nimport { Container } from \"./styles\"\r\nimport { api } from \"../../services/api\"\r\n\r\nimport closeImg from \"../../assets/close.svg\"\r\n\r\nexport function TransactionsTable() {\r\n  const { setTransactions, transactions } = useTransactions()\r\n\r\n  async function handleDeleteTransaction(transactionId: number) {\r\n    await api.delete(`/transactions/${transactionId}`)\r\n\r\n    const response = await api.get(\"/transactions\")\r\n\r\n    setTransactions(response.data.transactions)\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Título</th>\r\n            <th>Valor</th>\r\n            <th>Categoria</th>\r\n            <th>Data</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {transactions.map((transaction) => (\r\n            <tr key={transaction.id}>\r\n              <td>{transaction.title}</td>\r\n              <td className={transaction.type}>\r\n                {new Intl.NumberFormat(\"pt-BR\", {\r\n                  style: \"currency\",\r\n                  currency: \"BRL\",\r\n                }).format(transaction.amount)}\r\n              </td>\r\n              <td>{transaction.category}</td>\r\n              <td>\r\n                {new Intl.DateTimeFormat(\"pt-BR\").format(\r\n                  new Date(transaction.createdAt)\r\n                )}\r\n              </td>\r\n              <td>\r\n                <img\r\n                  onClick={() => handleDeleteTransaction(transaction.id)}\r\n                  src={closeImg}\r\n                  alt=\"Excluir depósito\"\r\n                />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </Container>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.main`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n  padding: 2.5rem 1rem;\r\n`","import { Summary } from \"../Summary\"\r\nimport { TransactionsTable } from \"../TransactionsTable\"\r\nimport { Container } from \"./styles\"\r\n\r\nexport function Dashboard() {\r\n  return (\r\n    <Container>\r\n      <Summary />\r\n      <TransactionsTable />\r\n    </Container>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components'\r\n\r\nexport const Container = styled.header`\r\n  background-color: var(--gray);\r\n`\r\n\r\nexport const Content = styled.div`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  padding: 2rem 1rem 11rem;\r\n\r\n  button { \r\n    font-size: 1rem;\r\n    color: #fff;\r\n    background-color: var(--gray-light);\r\n    border: 0;\r\n    padding: 0 2rem;\r\n    border-radius: 0.25rem;\r\n    height: 3rem;\r\n\r\n    transition: filter 0.3s;\r\n    \r\n  &:hover{\r\n    filter: brightness(0.9);\r\n  }\r\n\r\n  }\r\n`","import logoImg from \"../../assets/logo.svg\"\r\nimport { Container, Content } from \"./styles\"\r\n\r\ntype HeaderProps = {\r\n  onOpenNewTransactionModal: () => void\r\n}\r\n\r\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <img src={logoImg} alt=\"dt money\" />\r\n        <button onClick={onOpenNewTransactionModal} type=\"button\">\r\n          Nova transação\r\n        </button>\r\n      </Content>\r\n    </Container>\r\n  )\r\n}\r\n","import styled from \"styled-components\";\r\nimport { darken, transparentize } from 'polished'\r\n\r\nexport const Container = styled.form`\r\n  h2 { \r\n    color: var(--text-title);\r\n    font-size: 1.5rem; \r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  input{ \r\n    width: 100%;\r\n    padding: 0 1.5rem;\r\n    height: 4rem;\r\n    border-radius: 0.25rem;\r\n\r\n    border: 1px solid #d7d7d7;\r\n    background-color: #e7e9ee;\r\n\r\n    font-weight: 400;\r\n    font-size: 1rem;\r\n\r\n    &::placeholder {\r\n      color: var(--text-body);\r\n    }\r\n\r\n    & + input {\r\n      margin-top: 1rem;\r\n    }\r\n  }\r\n\r\n  button[type=\"submit\"] {\r\n    width: 100%;\r\n    padding: 0 1.5rem;\r\n    height: 4rem;\r\n    background-color: var(--green);\r\n    color: #fff;\r\n\r\n    border-radius: 0.25rem;\r\n    border: 0;\r\n\r\n    font-size: 1rem;\r\n    font-weight: 600;\r\n    margin-top: 1.5rem;\r\n\r\n    transition: filter 0.2s;\r\n\r\n    &:hover {\r\n      filter: brightness(0.9)\r\n    }\r\n  }\r\n`\r\n\r\nexport const TransactionTypeContainer = styled.div`\r\n  margin: 1rem 0;\r\n\r\n  display: flex;\r\n  gap: 0.5rem;\r\n`\r\n\r\ntype RadioBoxProps = {\r\n  isActive: boolean\r\n  activeColor: string\r\n}\r\n\r\nexport const RadioBox = styled.button<RadioBoxProps>`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    height: 4rem;\r\n    border: 1px solid #d7d7d7;\r\n    border-radius: 0.25rem;\r\n    background: ${(props) =>  props.isActive \r\n    ? transparentize(0.9, props.activeColor) \r\n    : 'transparent'};\r\n\r\n    flex: 1;\r\n    transition: border-color 0.2s;\r\n\r\n    &:hover {\r\n      border-color: ${darken(0.1, '#d7d7d7') };\r\n    }\r\n\r\n    img{\r\n      width: 20px;\r\n      height: 20px;\r\n    }\r\n\r\n    span {\r\n      display: inline-block;\r\n      margin-left: 1rem;\r\n      font-size: 1rem;\r\n      color: var(--text-title);\r\n    }\r\n`","import { FormEvent, useState } from \"react\"\r\nimport Modal from \"react-modal\"\r\nimport { useTransactions } from \"../../hooks/useTransactions\"\r\n\r\nimport incomeImg from \"../../assets/income.svg\"\r\nimport outcomeImg from \"../../assets/outcome.svg\"\r\nimport closeImg from \"../../assets/close.svg\"\r\n\r\nimport { Container, RadioBox, TransactionTypeContainer } from \"./styles\"\r\n\r\ntype NewTransactionModalProps = {\r\n  isOpen: boolean\r\n  onRequestClose: () => void\r\n}\r\n\r\nexport function NewTransactionModal({\r\n  isOpen,\r\n  onRequestClose,\r\n}: NewTransactionModalProps) {\r\n  const { createTransaction } = useTransactions()\r\n\r\n  const [type, setType] = useState(\"deposit\")\r\n  const [title, setTitle] = useState(\"\")\r\n  const [category, setCategory] = useState(\"\")\r\n  const [amount, setAmount] = useState(0)\r\n\r\n  async function handleCreateNewTransaction(event: FormEvent) {\r\n    event.preventDefault()\r\n\r\n    if (title.trim() === \"\" || category.trim() === \"\" || amount === 0) {\r\n      alert(\"Verifique os inputs!\")\r\n      return\r\n    }\r\n\r\n    await createTransaction({\r\n      title,\r\n      amount,\r\n      category,\r\n      type,\r\n    })\r\n\r\n    setTitle(\"\")\r\n    setAmount(0)\r\n    setCategory(\"\")\r\n    setType(\"deposit\")\r\n    onRequestClose()\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onRequestClose={onRequestClose}\r\n      overlayClassName=\"react-modal-overlay\"\r\n      className=\"react-modal-content\"\r\n    >\r\n      <button\r\n        type=\"button\"\r\n        onClick={onRequestClose}\r\n        className=\"react-modal-close\"\r\n      >\r\n        <img src={closeImg} alt=\"close modal\" />\r\n      </button>\r\n      <Container onSubmit={handleCreateNewTransaction}>\r\n        <h2>Cadastrar Transação</h2>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Título\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Valor\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(Number(e.target.value))}\r\n        />\r\n\r\n        <TransactionTypeContainer>\r\n          <RadioBox\r\n            type=\"button\"\r\n            onClick={() => setType(\"deposit\")}\r\n            isActive={type === \"deposit\"}\r\n            activeColor=\"green\"\r\n          >\r\n            <img src={incomeImg} alt=\"Entrada\" />\r\n            <span>Entrada</span>\r\n          </RadioBox>\r\n\r\n          <RadioBox\r\n            type=\"button\"\r\n            onClick={() => setType(\"withdraw\")}\r\n            isActive={type === \"withdraw\"}\r\n            activeColor=\"red\"\r\n          >\r\n            <img src={outcomeImg} alt=\"Saída\" />\r\n            <span>Saída</span>\r\n          </RadioBox>\r\n        </TransactionTypeContainer>\r\n\r\n        <input\r\n          placeholder=\"Categoria\"\r\n          value={category}\r\n          onChange={(e) => setCategory(e.target.value)}\r\n        />\r\n\r\n        <button type=\"submit\">Cadastrar</button>\r\n      </Container>\r\n    </Modal>\r\n  )\r\n}\r\n","import {createGlobalStyle} from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    --red: #e52e4d;\r\n    --gray: #5b5b5b;\r\n    --green: #33cc95;\r\n    \r\n    --gray-light: #969cb3;\r\n    \r\n    --text-title: #363f5f;\r\n    --text-body: #969cb3;\r\n    \r\n    --background: #e5e5e5;\r\n    --shape: #ffffff;\r\n  }\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html{\r\n    @media (max-width: 1080px) {\r\n      font-size: 93.75%;\r\n    }\r\n\r\n    @media (max-width: 720px) {\r\n      font-size: 87.5%;\r\n    }\r\n  }\r\n\r\n  body{\r\n    background-color: var(--background);\r\n    -webkit-font-smoothing: antialiased;\r\n  }\r\n\r\n  body, input, textarea, button {\r\n    font-family: 'Poppins', sans-serif;\r\n    font-weight: 400;\r\n  }\r\n\r\n  h1, h2, h3, h4, h5, h6, strong {\r\n    font-weight: 600;\r\n  }\r\n\r\n  button { \r\n    cursor: pointer;\r\n  }\r\n\r\n  [disabled] {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  .react-modal-overlay {\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    left: 0;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .react-modal-content {\r\n    width: 100%;\r\n    max-width: 576px;\r\n    background-color: var(--background);\r\n    padding: 3rem;\r\n    position: relative;\r\n    border-radius: 0.25rem;\r\n  }\r\n\r\n  .react-modal-close{\r\n    position: absolute;\r\n    right: 1.5rem;\r\n    top: 1.5rem;\r\n    border: 0;\r\n    background: transparent;\r\n\r\n    transition: filter 0.2s;\r\n\r\n    &:hover {\r\n      filter: brightness(0.8)\r\n    }\r\n  }\r\n`","import { useState } from \"react\"\nimport Modal from \"react-modal\"\n\nimport { Dashboard } from \"./components/Dashboard\"\nimport { Header } from \"./components/Header\"\nimport { NewTransactionModal } from \"./components/NewTransactionModal\"\nimport { TransactionsProvider } from \"./TransactionsContext\"\n\nimport { GlobalStyle } from \"./styles/global\"\n\n// Acessibilidade\nModal.setAppElement(\"#root\")\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] =\n    useState(false)\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true)\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false)\n  }\n\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n\n      <Dashboard />\n\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n\n      <GlobalStyle />\n    </TransactionsProvider>\n  )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { createServer, Model } from \"miragejs\"\nimport { App } from \"./App\"\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          title: \"Supermercado\",\n          type: \"withdraw\",\n          category: \"Compras\",\n          createdAt: new Date(),\n          amount: 500,\n        },\n        {\n          title: \"Freelancer\",\n          type: \"deposit\",\n          category: \"Trabalho\",\n          createdAt: new Date(),\n          amount: 2000,\n        },\n      ],\n    })\n  },\n\n  routes() {\n    this.namespace = \"api\"\n\n    this.get(\"/transactions\", () => {\n      return this.schema.all(\"transaction\")\n    })\n\n    this.post(\"/transactions\", (schema, request) => {\n      const data = JSON.parse(request.requestBody)\n      data.createdAt = new Date()\n      return schema.create(\"transaction\", data)\n    })\n\n    this.delete(\"/transactions/:id\")\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}